import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.0.RELEASE"
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'

    id 'maven'
    id 'maven-publish'
    id 'signing'
}

ext {
    ossrhUsername = System.getenv("OSSRH_USERNAME")
    ossrhPassword = System.getenv("OSSRH_PASSWORD")
}
ext.set("signing.secretKeyRingFile", ".signing/secring.gpg")
ext.set("signing.keyId", System.getenv("SIGNING_KEYID"))
ext.set("signing.password", System.getenv("SIGNING_PASSWORD"))

group = serviceGroup
version = serviceVersion
archivesBaseName = serviceName
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/" }
    maven { url "http://jasperreports.sourceforge.net/maven2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    implementation 'junit:junit:4.12'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.slf4j:slf4j-ext"
    annotationProcessor 'org.projectlombok:lombok:1.16.20'
    compile "org.openlmis:openlmis-fulfillment:8.2.2-SNAPSHOT:exec"

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "junit:junit"
    testCompile "org.powermock:powermock-api-mockito2:2.0.4"
    testCompile "org.powermock:powermock-module-junit4:2.0.4"

}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

checkstyle {
    toolVersion = "7.1"
}

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }

  additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

}

def time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
time.setTimeZone(TimeZone.getTimeZone("GMT"))

def versionToCopy = copySpec {
    from 'src/main/resources'
    include 'version_template'
}

task generateBuildInfo(type:Copy) {
    with versionToCopy
    into 'build/resources/main'
    rename { 'version.properties' }
    expand([
            build: "$System.env.BUILD_NUMBER", // ${build}
            branch: "$System.env.GIT_BRANCH", // ${branch}
            time: time.format(new Date()) + " GMT" // ${time}
    ])
    doLast{
        delete 'src/main/resources/version_template'
    }
}

signing {
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
signArchives.onlyIf {project.getProperty("signing.keyId") && project.getProperty("signing.password")}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name projectName
                packaging 'jar'
                description projectDescription
                url = 'https://www.selv.org.mz'

                licenses {
                    license {
                        name 'GNU Affero General Public License, Version 3'
                        url 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'techcommittee'
                        name = 'tech committee'
                        email = 'info@openlmis.org'
                        organizationUrl = 'https://villagereach.org'
                    }
                }
            }
        }
    }
}
uploadArchives.onlyIf { project.getProperty("ossrhUsername") && project.getProperty("ossrhPassword") }

assemble {
    finalizedBy uploadArchives
}

processResources {
    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

//+dopisać task gradlowy który przeniesie tego jara do mainProjectPath/extensions?
//etc/openlmis/extensions